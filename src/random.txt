            <div className=" w-full bg-white rounded-lg shadow dark:border mt-8 mb-11 lg:mt-16 lg:mb-60 md:mt-11 md:mb-40 sm:max-w-md md:max-w-xl xl:p-0 xl:mb-80  dark:bg-gray-800 dark:border-gray-700">
                {/* {toggleForm?
                    <LoginForm  />
                :
                    <SignUpForm  />
                } */}
            </div>






                            <div>
                    <img className='scale-50 relative left-10' src={books[counter].image} alt="" />
                </div>
                <div>
                    <img className='scale-75' src={books[counter + 1].image} alt="" />
                </div>
                <div>
                    <img className='scale-1' src={books[counter + 2].image} alt="" />
                </div>
                <div>
                    <img className='scale-75' src={books[counter + 3].image} alt="" />
                </div>
                <div>
                    <img className='scale-50 relative right-10' src={books[counter + 4].image} alt="" />
                </div>






                            <div className='flex transition-container' style={{ transform: `translateX(${counter * -20}%)`, transition: 'transform 0.5s ease-in-out' }}>
                <div style={{minWidth: '20%'}}>
                    <img className='scale-50' src={books[0].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='scale-75' src={books[1].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='scale-1' src={books[2].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='' src={books[3].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='' src={books[4].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='' src={books[5].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='' src={books[6].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='' src={books[7].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='' src={books[8].image} alt="" />
                </div>
                <div style={{minWidth: '20%'}}>
                    <img className='' src={books[9].image} alt="" />
                </div>
            </div>







            import { useState, useEffect, useRef, useMemo } from 'react'
import useGetWindowSize from '../hooks/useGetWindowSize';
import RecommendedBookDetails from './RecommendedBookDetails';
import { books } from '../data/books';

export default function RecomendedSlider(){
    const [ counter, setCount] = useState(0);
    const windowSize  = useGetWindowSize();
    const [visibleBooks, setVisibleBooks] = useState(5);
    const [centerBookOffset, setCenterBookOffset] = useState(2);
    const centerBookOffsetRef = useRef(centerBookOffset);

    useEffect(() =>{
        const oldCenterBook = counter + centerBookOffsetRef.current; 

        switch (windowSize) {
            case 'small':
                setVisibleBooks(1);
                setCenterBookOffset(0);
                break;
            case 'medium':
                setVisibleBooks(3);
                setCenterBookOffset(1);
                break;
            case 'large':
                setVisibleBooks(5);
                setCenterBookOffset(2);
                break;
            default:
                console.warn("Unexpected window size:", windowSize);
                break;
        }

        setCount(oldCenterBook - centerBookOffset);
    }, [windowSize, counter, centerBookOffset]);

    useEffect(() => {
        centerBookOffsetRef.current = centerBookOffset;
    }, [centerBookOffset]);
  
    const handleIncrement = () => {
      if (counter < books.length - visibleBooks + centerBookOffset) setCount(counter + 1);
    //   console.log(`Counder: ${counter}`)
    //   console.log(`center Book offset: ${centerBookOffset}`)
    };
    
    const handleDecrement = () => {
      if (counter > -centerBookOffset) setCount(counter - 1);
    //   console.log(`Counder: ${counter}`)
    //   console.log(`center Book offset: ${centerBookOffset}`)
    };

    const getTransitionStyles = (index: number): string => {
        let leftTertiaryBook: number;
        let leftSecondayBook: number;
        let centerBook: number;
        let rightSecondaryBook: number;
        let rightTertiaryBook: number;
      
        switch (windowSize) {
          case 'small':
          case 'medium':
            centerBook = counter + centerBookOffset;
            console.log(`Centerbook: ${centerBook}`)
            return (index === centerBook) ? "scale-0" : "scale-0";
            // return "scale-100";
            
          case 'large':
            leftTertiaryBook = counter;
            leftSecondayBook = counter + 1;
            centerBook = counter + centerBookOffset;
            rightSecondaryBook = counter + 3;
            rightTertiaryBook = counter + 4;
        
            if(index === leftTertiaryBook || index === rightTertiaryBook) return "scale-50";
            if(index === leftSecondayBook || index === rightSecondaryBook) return "scale-75";
            if(index === centerBook) return "scale-100";
            if(index < leftTertiaryBook || index > rightTertiaryBook) return "scale-50";
            break;
            
          default:
            console.warn(`Unexpected windowSize: ${windowSize}`);
            return "";
        }
        return "";
      }
      

    const transitionStyles = useMemo(() => books.map((_, index) => getTransitionStyles(index)), [counter, windowSize]);

    return(
        <div className='w-full bg-amber-50 pt-4 pb-8'>
            <div className='flex flex-col text-center'>
                <h1 className='text-2xl md:text-5xl font-semibold text-slate-900 mt-10'>Recomended For You</h1>
                <p className='w-2/3 my-10 m-auto text-slate-500'>Unearth a world of books specifically curated to match your unique tastes and preferences! Dive into compelling narratives and discover hidden gems, meticulously selected to resonate with your literary appetite.</p>
            </div>
            <div className='overflow-hidden w-11/12 flex relative m-auto py-4'>
            <button onClick={handleIncrement} className='absolute z-10 md:left-4 lg:left-8 xl:left-12 bg-white shadow-md p-2 rounded m-2 top-1/3 transform -translate-y-1/2 hover:scale-110 active:scale-95 duration-300'>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6 text-amber-600 hover:text-amber-800 duration-200">
                    <path fillRule="evenodd" d="M11.03 3.97a.75.75 0 010 1.06l-6.22 6.22H21a.75.75 0 010 1.5H4.81l6.22 6.22a.75.75 0 11-1.06 1.06l-7.5-7.5a.75.75 0 010-1.06l7.5-7.5a.75.75 0 011.06 0z" clipRule="evenodd" />
                </svg>
            </button>
            
            <div className='flex transition-container ' style={{ transform: `translateX(${counter * -33.333333}%)`, transition: 'transform 0.5s ease-in-out' }}>
                {books.map((book, index) => (
                <div key={index} className='book-container sm:min-w-full lg:min-w-1/5'>
                    <img className={`shadow-md rounded-md relative duration-500 ease-in-out ${transitionStyles[index]} `} src={book.image} alt="" />
                    <RecommendedBookDetails index={index} counter={counter} centerBookOffset={centerBookOffset} book={{
                            title: book.title,
                            price: book.price
                        }} />
                </div>
                ))}
            </div>
            
            <button onClick={handleDecrement} className='absolute z-10 md:right-4 lg:right-8 xl:right-12 bg-white shadow-md p-2 rounded m-2 top-1/3 transform -translate-y-1/2 hover:scale-110 active:scale-95 duration-300'>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6 text-amber-600 hover:text-amber-800 duration-200">
                    <path fillRule="evenodd" d="M12.97 3.97a.75.75 0 011.06 0l7.5 7.5a.75.75 0 010 1.06l-7.5 7.5a.75.75 0 11-1.06-1.06l6.22-6.22H3a.75.75 0 010-1.5h16.19l-6.22-6.22a.75.75 0 010-1.06z" clipRule="evenodd" />
                </svg>
            </button>
            </div>
        </div>
    )
}




            {/* <button onClick={handleIncrement}>+</button>
            <button onClick={handleDecrement}>-</button>
            
        <div className='overflow-hidden'>
            <div className='flex' style={{ transform: `translateX(${counter * translationValue}%)`, transition: 'transform 0.5s ease-in-out' }}>
                {books.map((book, index) => (
                <div key={index} className={` md:min-w-1/3 lg:min-w-1/5`}>
                    <img className={`duration-500 ease-in-out ${transitionStyles[index]} `} src={book.image} alt="" />
                    <RecommendedBookDetails index={index} counter={counter} centerBookOffset={centerBookOffset} book={{
                            title: book.title,
                            price: book.price
                        }} />
                </div>
                ))}
            </div>
        </div> */}

















        @layer base {
  :root {
    --text: #0d0b02;
    --background: #fefefb;
    --primary: #112678;
    --secondary: #ebbd05;
    --accent: #d86464;
  }
  .dark {
    --text: #fdfbf2;
    --background: #040401;
    --primary: #879bee;
    --secondary: #facc14;
    --accent: #9b2727;
  }
},


@layer base {
  :root {
    --text-50: #fcf8e9;
    --text-100: #f8f1d3;
    --text-200: #f1e4a7;
    --text-300: #ead67b;
    --text-400: #e3c84f;
    --text-500: #ddba22;
    --text-600: #b0951c;
    --text-700: #847015;
    --text-800: #584b0e;
    --text-900: #2c2507;
    --text-950: #161303;
    
    --background-50: #fafaeb;
    --background-100: #f5f5d6;
    --background-200: #ebebad;
    --background-300: #e0e085;
    --background-400: #d6d65c;
    --background-500: #cccc33;
    --background-600: #a3a329;
    --background-700: #7a7a1f;
    --background-800: #525214;
    --background-900: #29290a;
    --background-950: #141405;
    
    --primary-50: #e9edfc;
    --primary-100: #d2daf9;
    --primary-200: #a6b5f2;
    --primary-300: #7990ec;
    --primary-400: #4c6be6;
    --primary-500: #2046df;
    --primary-600: #1938b3;
    --primary-700: #132a86;
    --primary-800: #0d1c59;
    --primary-900: #060e2d;
    --primary-950: #030716;
    
    --secondary-50: #fefae6;
    --secondary-100: #fef4cd;
    --secondary-200: #fde99b;
    --secondary-300: #fcdf69;
    --secondary-400: #fbd437;
    --secondary-500: #fac905;
    --secondary-600: #c8a104;
    --secondary-700: #967903;
    --secondary-800: #645002;
    --secondary-900: #322801;
    --secondary-950: #191401;
    
    --accent-50: #faebeb;
    --accent-100: #f5d6d6;
    --accent-200: #ebadad;
    --accent-300: #e08585;
    --accent-400: #d65c5c;
    --accent-500: #cc3333;
    --accent-600: #a32929;
    --accent-700: #7a1f1f;
    --accent-800: #521414;
    --accent-900: #290a0a;
    --accent-950: #140505;
    
  }
  .dark {
    --text-50: #161303;
    --text-100: #2c2507;
    --text-200: #584b0e;
    --text-300: #847015;
    --text-400: #b0951c;
    --text-500: #ddba22;
    --text-600: #e3c84f;
    --text-700: #ead67b;
    --text-800: #f1e4a7;
    --text-900: #f8f1d3;
    --text-950: #fcf8e9;
    
    --background-50: #141405;
    --background-100: #29290a;
    --background-200: #525214;
    --background-300: #7a7a1f;
    --background-400: #a3a329;
    --background-500: #cccc33;
    --background-600: #d6d65c;
    --background-700: #e0e085;
    --background-800: #ebebad;
    --background-900: #f5f5d6;
    --background-950: #fafaeb;
    
    --primary-50: #030716;
    --primary-100: #060e2d;
    --primary-200: #0d1c59;
    --primary-300: #132a86;
    --primary-400: #1938b3;
    --primary-500: #2046df;
    --primary-600: #4c6be6;
    --primary-700: #7990ec;
    --primary-800: #a6b5f2;
    --primary-900: #d2daf9;
    --primary-950: #e9edfc;
    
    --secondary-50: #191401;
    --secondary-100: #322801;
    --secondary-200: #645002;
    --secondary-300: #967903;
    --secondary-400: #c8a104;
    --secondary-500: #fac905;
    --secondary-600: #fbd437;
    --secondary-700: #fcdf69;
    --secondary-800: #fde99b;
    --secondary-900: #fef4cd;
    --secondary-950: #fefae6;
    
    --accent-50: #140505;
    --accent-100: #290a0a;
    --accent-200: #521414;
    --accent-300: #7a1f1f;
    --accent-400: #a32929;
    --accent-500: #cc3333;
    --accent-600: #d65c5c;
    --accent-700: #e08585;
    --accent-800: #ebadad;
    --accent-900: #f5d6d6;
    --accent-950: #faebeb;
    
  }
},



			//=============================================================================
			// x.domain([1, 12]);
			// y.domain([0, max as number]);

			// const xAxisGroup = graph
			// 	.append("g")
			// 	.attr("transform", `translate(0,${graphHeight})`);
			// const yAxisGroup = graph.append("g");

			// const xAxis = d3.axisBottom(x);
			// const yAxis = d3
			// 	.axisLeft(y)
			// 	.ticks(5)
			// 	.tickFormat((d) => d + " orders");

			// xAxisGroup.call(xAxis);
			// yAxisGroup.call(yAxis);

			// const line = d3
			// 	.line()
			// 	.x((d) => x(d.month))
			// 	.y((d) => y(d.sold))
			// 	.curve(d3.curveCatmullRom.alpha(0.5));
			// 	c
			//==============================================================================================
			// graph
			// 	.append("path")
			// 	.datum(bookSales)
			// 	.attr("fill", "none")
			// 	.attr("stroke", "steelblue")
			// 	.attr("stroke-width", 4)
			// 	.attr("d", line);

			// const graph = svg
			// 	.append("g")
			// 	.attr("width", graphWidth)
			// 	.attr("height", graphHeight)
			// 	.attr("transform", `translate(${margin.left},${margin.top})`);

			// const xAxisGroup = graph
			// 	.append("g")
			// 	.attr("transform", `translate(0,${graphHeight})`);
			// const yAxisGroup = graph.append("g");

			// const max = d3.max(bookSales, (d) => d.sold);
			// const y = d3
			// 	.scaleLinear()
			// 	.domain([0, max as number])
			// 	.range([graphHeight, 0]);

			// const x = d3
			// 	.scaleBand()
			// 	.domain(bookSales.map((book) => book.month.toString()))
			// 	.range([0, graphWidth])
			// 	.paddingInner(0.2)
			// 	.paddingOuter(0.2);

			// const rects = graph.selectAll("rect").data(bookSales);

			// rects
			// 	.enter()
			// 	.append("rect")
			// 	.attr("width", x.bandwidth)
			// 	.attr("height", (d) => graphHeight - y(d.sold))
			// 	.attr("fill", "rgb(8 145 178)")
			// 	.attr("x", (d) => x(d.month.toString()) ?? 0)
			// 	.attr("y", (d) => y(d.sold));

			// const xAxis = d3.axisBottom(x);
			// const yAxis = d3
			// 	.axisLeft(y)
			// 	.ticks(5)
			// 	.tickFormat((d) => d + " orders");

			// xAxisGroup.call(xAxis);
			// yAxisGroup.call(yAxis);








            			const margin = { top: 20, right: 20, bottom: 100, left: 100 };
			const graphWidth = 800 - margin.left - margin.right;
			const graphHeight = 600 - margin.top - margin.bottom;
			// const x = d3.scaleTime().range([0, graphWidth]);
			// const y = d3.scaleTime().range([graphHeight, 0]);
			const max = d3.max(filteredBooks, (d) => d.sold);

			const svg = d3.select(svgRef.current);
			svg.selectAll("*").remove();

			const graph = svg
				.append("g")
				.attr("width", graphWidth)
				.attr("height", graphHeight)
				.append("g")
				.attr("transform", `translate(${margin.left},${margin.top})`);

			const x = d3
				.scaleTime()
				.domain(
					d3.extent(filteredBooks, (d) => new Date(d.date)) as [Date, Date]
				)
				.range([0, graphWidth]);

			const y = d3
				.scaleLinear()
				.domain([0, max as number])
				.range([graphHeight, 0]);

			const xAxisGroup = graph
				.append("g")
				.attr("transform", `translate(0,${graphHeight})`);
			const yAxisGroup = graph.append("g");

			const xAxis = d3
				.axisBottom(x)
				.tickValues(filteredBooks.map((d) => new Date(d.date)))
				.tickFormat((d) => {
					if (d instanceof Date) {
						return d3.timeFormat("%d")(d);
					}
					return ""; // Return an empty string or some default value if `d` is not a Date
				});
			const yAxis = d3
				.axisLeft(y)
				// .ticks(5)
				.tickFormat((d) => `${d} orders`);

			xAxisGroup.transition().duration(500).call(xAxis);
			yAxisGroup.transition().duration(500).call(yAxis);

			const line = d3
				.line<BookSaleWithDateType>()
				.x((d) => x(new Date(d.date)))
				.y((d) => y(d.sold));
			// .curve(d3.curveCatmullRom.alpha(0.5));

			const path = graph
				.append("path")
				.datum(filteredBooks)
				.attr("fill", "none")
				.attr("stroke", "steelblue")
				.attr("stroke-width", 2)
				.attr("d", line);

			const totalLength = path.node()!.getTotalLength();

			path
				.attr("stroke-dasharray", totalLength + " " + totalLength)
				.attr("stroke-dashoffset", totalLength)
				// Animate the stroke-dashoffset to 0
				.transition()
				.delay(500)
				.duration(1000) // Duration of the animation in milliseconds
				.ease(d3.easeLinear)
				.attr("stroke-dashoffset", 0);

			const circles = graph.selectAll("circle").data(filteredBooks);
			circles
				.enter()
				.append("circle")
				.attr("r", 4)
				.attr("cx", (d) => x(new Date(d.date)))
				.attr("cy", graphHeight)
				.transition()
				.duration(500)
				.attr("cy", (d) => y(d.sold))
				.attr("fill", "blue");
		}
	}, [filteredBooks]);

	// useEffect(() => {
	// 	console.log("Rerender.");
	// 	if (svgRef.current) {
	// 		const margin = { top: 20, right: 20, bottom: 100, left: 100 };
	// 		const graphWidth = 800 - margin.left - margin.right;
	// 		const graphHeight = 600 - margin.top - margin.bottom;
	// 		const max = d3.max(filteredBooks, (d) => d.sold);

	// 		// Select the SVG and graph group, creating them if they don't exist
	// 		const svg = d3.select(svgRef.current);
	// 		let graph = svg.select(".graph-content");
	// 		if (graph.empty()) {
	// 			graph = svg
	// 				.append("g")
	// 				.classed("graph-content", true)
	// 				.attr("transform", `translate(${margin.left},${margin.top})`);
	// 		}

	// 		// Update the scales
	// 		const x = d3
	// 			.scaleTime()
	// 			.domain(
	// 				d3.extent(filteredBooks, (d) => new Date(d.date)) as [Date, Date]
	// 			)
	// 			.range([0, graphWidth]);

	// 		const y = d3
	// 			.scaleLinear()
	// 			.domain([0, max as number])
	// 			.range([graphHeight, 0]);

	// 		// Select and update the x and y axis groups
	// 		let xAxisGroup = graph.select(".x-axis");
	// 		if (xAxisGroup.empty()) {
	// 			xAxisGroup = graph
	// 				.append("g")
	// 				.classed("x-axis", true)
	// 				.attr("transform", `translate(0,${graphHeight})`);
	// 		}

	// 		let yAxisGroup = graph.select(".y-axis");
	// 		if (yAxisGroup.empty()) {
	// 			yAxisGroup = graph.append("g").classed("y-axis", true);
	// 		}

	// 		// Transition the axes
	// 		xAxisGroup.transition().duration(500).call(d3.axisBottom(x));
	// 		yAxisGroup.transition().duration(500).call(d3.axisLeft(y));

	// 		// Create the line generator
	// 		const line = d3
	// 			.line<BookSaleWithDateType>()
	// 			.x((d) => x(new Date(d.date)))
	// 			.y((d) => y(d.sold));

	// 		// Update or create the path for the line chart
	// 		let path = graph.select(".line-path");
	// 		if (path.empty()) {
	// 			path = graph
	// 				.append("path")
	// 				.classed("line-path", true)
	// 				.attr("fill", "none")
	// 				.attr("stroke", "steelblue")
	// 				.attr("stroke-width", 2);
	// 		}

	// 		path.datum(filteredBooks).transition().duration(1000).attr("d", line);

	// 		// Update or create the circles
	// 		let circles = graph.selectAll("circle").data(filteredBooks);

	// 		circles
	// 			.enter()
	// 			.append("circle")
	// 			.merge(circles)
	// 			.transition()
	// 			.duration(500)
	// 			.attr("r", 4)
	// 			.attr("cx", (d) => x(new Date(d.date)))
	// 			.attr("cy", (d) => y(d.sold))
	// 			.attr("fill", "blue");

	// 		// Handle exiting elements
	// 		circles
	// 			.exit()
	// 			.transition()
	// 			.duration(500)
	// 			.attr("cy", graphHeight)
	// 			.remove();
	// 	}
	// }, [filteredBooks]);